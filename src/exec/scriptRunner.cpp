#define WIN32_LEAN_AND_MEAN
#include "../tcatlib/api.hpp"
#include "scriptRunner.hpp"
#include <stdexcept>
#include <windows.h>

namespace exec {

void scriptRunner::execute(const char *path, console::iLog& l)
{
   std::string logPath = chooseTempPath();
   FILE *pLog = ::fopen(logPath.c_str(),"w");
   if(!pLog)
      throw std::runtime_error("failed to create log file");
   ::fprintf(pLog,"log started by gordian\r\n");
   ::fclose(pLog);

   std::string wrapperPath = chooseTempPath() + ".bat";
   FILE *pWrapper = ::fopen(wrapperPath.c_str(),"w");
   if(!pWrapper)
      throw std::runtime_error("failed to create wrapper script");

   ::fprintf(pWrapper,"@echo off\n");
   ::fprintf(pWrapper,"\n");
   ::fprintf(pWrapper,"REM this file is auto-generated by gordian\n");
   ::fprintf(pWrapper,"\n");
   ::fprintf(pWrapper,"setlocal\n");
   ::fprintf(pWrapper,"set gLOG=\"%s\"\n",logPath.c_str());
   ::fprintf(pWrapper,"set gSUCCESS=***INSTALL SUCCESSFUL***\n");
   //::fprintf(pWrapper,"set gFAIL=***INSTALL FAILED***\n");
   ::fprintf(pWrapper,"set gERROR=***ERROR: \n");
   ::fprintf(pWrapper,"\n");
   ::fprintf(pWrapper,"echo wrapper script calling entering user script>>%%gLOG%%\n");
   ::fprintf(pWrapper,"call \"%s\"\n",path);
   ::fprintf(pWrapper,"echo user script returned to wrapper script; done>>%%gLOG%%\n");
   ::fclose(pWrapper);

   STARTUPINFO si;
   ::memset(&si,0,sizeof(STARTUPINFO));
   si.cb = sizeof(STARTUPINFO);

   PROCESS_INFORMATION pi;
   ::memset(&pi,0,sizeof(PROCESS_INFORMATION));

   std::string command = "cmd.exe /c ";
   command += wrapperPath;
   //command += "\"";

   BOOL success = ::CreateProcessA(
      //"cmd.exe",                          // lpApplicationName,
     NULL,
      const_cast<char*>(command.c_str()), // lpCommandLine,
      NULL,                               // lpProcessAttributes,
      NULL,                               // lpThreadAttributes,
      FALSE,                              // bInheritHandles,
      0,                                  // dwCreationFlags,
      NULL,                               // lpEnvironment,
      NULL,                               // lpCurrentDirectory,
      &si,                                // lpStartupInfo,
      &pi                                 // lpProcessInformation
   );
   if(success)
   {
      ::WaitForSingleObject(pi.hProcess,INFINITE);

      ::CloseHandle(pi.hProcess);
      ::CloseHandle(pi.hThread);

      // check the log
   }

   //::DeleteFile(logPath.c_str());
   //::DeleteFile(wrapperPath.c_str());

   if(!success)
      throw std::runtime_error("failed to create process");
}

std::string scriptRunner::chooseTempPath()
{
   char path[MAX_PATH];
   if(::GetTempPathA(MAX_PATH,path)==0)
      throw std::runtime_error("internal software error");

   char fullPath[MAX_PATH + 1];
   if(::GetTempFileNameA(path,"cdw_G",0,fullPath)==0)
      throw std::runtime_error("internal software error");

   return fullPath;
}

tcatExposeTypeAs(scriptRunner,iScriptRunner);

} // namespace exec

tcatImplServer();

BOOL WINAPI DllMain(HINSTANCE, DWORD, LPVOID) { return TRUE; }
